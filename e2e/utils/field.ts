import { format, subDays } from "date-fns";
import { FRDescribeFieldsType } from "../model/types/frBase";
import { base62ToInt } from "./util";
import { FrBaseModule } from "../model/frBaseModule";
import { Page } from "@playwright/test";

/**
 * テストで利用しない項目を定義する
 * @returns boolean
 */
export const dontTestFieldsName = (field: FRDescribeFieldsType) => {
  const dontTestFields = [
    'tags',
    'last_action_date',
    'isconvertedfromlead',
    'starred',
  ]
  if(dontTestFields.includes(field.name)){
    return true;
  }

  // 編集不可な項目はテストしない
  if(field.editable === false) {
    return true;
  }

  // 以下の項目タイプはテストしない
  const dontTestFieldTypes = [
    'multipicklist',
    'reference', // できなくて良い
    'owner', // できなくて良い
    'datetime', // できなくて良い
    'autogenerated', // できなくて良い
    'image', // できなくて良い
  ];
  if(dontTestFieldTypes.includes(field.type.name)){
    return true;
  }

  return false;
}

/**
 * FRDescribeFieldsType typeを受け取って、項目に適した値を返す
 */
export const getFieldValue = async (field: FRDescribeFieldsType, hash?: string) => {
  if (dontTestFieldsName(field)) {
    return false;
  }

  // if(field.type.name === 'reference'){
  //   const moduleModel = await FrBaseModule.init(field.type.refersTo && field.type.refersTo[0] || '');
  //   if(!moduleModel){
  //     // return false;
  //   }
  //   const record = await moduleModel.getOneRecordFromModuleName(field.type.refersTo && field.type.refersTo[0] || '');
  //   if(!record){
  //     // return false;
  //   }
  //   // record.id は 22x1 のような形式なため、xで分割した後ろの数字だけを取得する
  //   const recordId = record.id.split('x')[1];
  // }

  switch (field.type.name) {
    case 'string':
      return `${field.label}_${hash}`;
    case 'text':
      return `${field.label}_${hash}`;
    case 'url':
      return `http://example.com/${hash}`;
    case 'email':
      return `${hash || 'example'}@example.com`;
    case 'integer': 
    case 'currency':
      return base62ToInt(hash || '1').toString();
    case 'date':
      const yesterday = subDays(new Date(), 1); // 前日の日付を取得
      return format(yesterday, 'yyyy-MM-dd');
    case 'phone':
      return `090-1234-5678`;
    case 'picklist':
      return field.type.picklistValues?.[0].value || '';
    case 'boolean':
      return 'true';
    default:
      return `${field.label}_${hash}`;
    }
};

/**
 * フィールドに値を登録する
 */
export const fillField = async (page: Page, fieldObj: FRDescribeFieldsType, value: string) => {
  if (fieldObj.type.name === "text") {
    await page.fill(
      `textarea[name="${fieldObj.name}"]`,
      `${value}`
    );
  } else if (fieldObj.type.name === "date") {
    await page.fill(
      `input[name="${fieldObj.name}"]`,
      `${value}`
    );
    await page.click(`input[name="${fieldObj.name}"]`);
  } else if (fieldObj.type.name === "picklist") {
    await page.selectOption(`select[name=${fieldObj.name}]`, value);
  } else if (fieldObj.type.name === "boolean") {
    await page.check(`input[type="checkbox"][name="${fieldObj.name}"]`);
  } else {
    await page.fill(
      `input[name="${fieldObj.name}"]`,
      `${value}`
    );
  }
}