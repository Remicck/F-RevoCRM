import { format, subDays } from "date-fns";
import { FRDescribeFieldsType } from "../model/types/frBase";
import { base62ToInt, generateRandomString } from "./util";
import { FrBaseModule } from "../model/frBaseModule";
import { Page } from "@playwright/test";
import { FRDescribeFieldsTypeWithModuleName } from "../model/types/frTest";

/**
 * テストで利用しない項目を定義する
 * @returns boolean
 */
export const dontTestFieldsName = (
  field: FRDescribeFieldsTypeWithModuleName
) => {
  // 以下のリストに含まれているものはテストしない
  const dontTestFields = [
    // global ban
    "tags",
    "last_action_date",
    "isconvertedfromlead",
    "starred",
    'emailoptout',


    // portal
    "from_portal",
    // inventory
    "taxclass",
    "tax4",
    "currency1",
  ];
  if (dontTestFields.includes(field.name)) {
    return true;
  }
  // 編集不可な項目はテストしない
  if (field.editable === false) {
    return true;
  }

  /************************
   * モジュール別対応
   ************************/
  if (
    field.moduleName === "HelpDesk" &&
    (field.name === "description" || field.name === "solution")
  ) {
    return true;
  }
  if (
    field.moduleName === "Faq" &&
    (field.name === "question" || field.name === "faq_answer")
  ) {
    return true;
  }
  if (
    field.moduleName === "Contacts" &&
    (field.name === "account_id")
  ) {
    return true;
  }


  // 以下の項目タイプはテストしない
  const dontTestFieldTypes = [
    "multipicklist",
    // "reference", // できなくて良い
    "owner", // できなくて良い
    "datetime", // できなくて良い
    "autogenerated", // できなくて良い
    "image", // できなくて良い
  ];
  if (dontTestFieldTypes.includes(field.type.name)) {
    return true;
  }

  return false;
};

/**
 * FRDescribeFieldsType typeを受け取って、項目に適した値を返す
 */
export const getFieldValue = async (
  field: FRDescribeFieldsTypeWithModuleName,
  hash?: string
) => {
  if (dontTestFieldsName(field)) {
    return false;
  }

  // if(field.type.name === 'reference'){
  //   const moduleModel = await FrBaseModule.init(field.type.refersTo && field.type.refersTo[0] || '');
  //   if(!moduleModel){
  //     // return false;
  //   }
  //   const record = await moduleModel.getOneRecordFromModuleName(field.type.refersTo && field.type.refersTo[0] || '');
  //   if(!record){
  //     // return false;
  //   }
  //   // record.id は 22x1 のような形式なため、xで分割した後ろの数字だけを取得する
  //   const recordId = record.id.split('x')[1];
  // }

  switch (field.type.name) {
    case "string":
      return `${field.label}_${hash}`;
    case "text":
      return `${field.label}_${hash}`;
    case "url":
      return `http://example.com/${hash}`;
    case "email":
      return `${hash || "example"}@example.com`;
    case "integer":
    case "currency":
      return base62ToInt(hash || "1").toString();
    case "double":
      return (Math.floor(Math.random() * 100) + 1).toString();
    case "date":
      const yesterday = subDays(new Date(), 1); // 前日の日付を取得
      return format(yesterday, "yyyy-MM-dd");
    case "phone":
      return `090-1234-5678`;
    case "picklist":
      return field.type.picklistValues?.[0].value || "";
    case "boolean":
      return "true";
    default:
      return `${field.label}_${hash}`;
  }
};

/**
 * フィールドに値を登録する
 */
export const fillField = async (
  page: Page,
  fieldObj: FRDescribeFieldsTypeWithModuleName,
  value: string,
  parentElement?: string
) => {

  const parentElementSelector = parentElement ? `${parentElement} ` : "";

  if (fieldObj.type.name === "text") {
    await page.fill(`${parentElementSelector} textarea[name="${fieldObj.name}"]`, `${value}`);
  } else if (fieldObj.type.name === "reference") {
    // `#${fieldObj.moduleName}_editView_fieldName_${fieldObj.name}_create` が存在するかチェックする
    const createButton = await page.locator(
      `#${fieldObj.moduleName}_editView_fieldName_${fieldObj.name}_create`
    );
    if (await createButton.isHidden()) {
      return false;
    }

    await page
      .locator(
        `#${fieldObj.moduleName}_editView_fieldName_${fieldObj.name}_create`
      )
      .click();
    // 値を登録する
    const relatedModule = await FrBaseModule.init(
      (fieldObj.type.refersTo && fieldObj.type.refersTo[0]) || ""
    );
    if (!relatedModule) {
      return false;
    }
    const relatedDescribe = await relatedModule.getDescribe();
    if (!relatedDescribe) {
      return false;
    }
    const hash = generateRandomString(8);
    const relatedFields = relatedDescribe.fields;
    const fieldsWithModuleName: FRDescribeFieldsTypeWithModuleName[] = relatedFields.map((info) => {
      return {
        moduleName: (fieldObj.type.refersTo && fieldObj.type.refersTo[0]) || "",
        ...info,
      };
    }).filter((info) => {
      return info.mandatory === true;
    });
    for (const [_key, fieldObj] of Object.entries(fieldsWithModuleName)) {
      if (dontTestFieldsName(fieldObj)) {
        continue;
      }

      const normalValue = (await getFieldValue(fieldObj, hash)) || "";
      await fillField(page, fieldObj, normalValue, '.modal-content');
    }

    await page.waitForTimeout(1000);

    await page.locator('button[name="saveButton"]').click();
    await page.waitForLoadState("networkidle");
    await page.waitForTimeout(1000);
  } else if (fieldObj.type.name === "date") {
    await page.fill(`${parentElementSelector} input[name="${fieldObj.name}"]`, `${value}`);
    await page.waitForTimeout(500);
    if(!await page.locator(`.modal-header`).first().isHidden()){
      await page.locator(`.modal-header`).first().click();
    }else{
      await page.locator(`.fieldBlockHeader`).first().click();
    }
  } else if (fieldObj.type.name === "picklist") {
    await page.selectOption(`${parentElementSelector} select[name=${fieldObj.name}]`, value);
  } else if (fieldObj.type.name === "boolean") {
    await page.check(`${parentElementSelector} input[type="checkbox"][name="${fieldObj.name}"]`);
  } else {
    await page.fill(`${parentElementSelector} input[name="${fieldObj.name}"]`, `${value}`);
  }
};
